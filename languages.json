{
    "en": {
      "langdesc": "English üá∫üá∏",
      "app_name": "Tic Tac Toe",
      "advice": "Note:",
      "advice_msg": "X will always play first!",
      "restart": "Restart",
      "author": "Author: Vivaldo Roque",
      "install": "Install",
      "contact_text": "Contact",
      "about_text": "About",
      "home_text": "Home",
      "side_msg": "Choose between \"X\" or \"O\"",
      "X": "Player X's turn",
      "O" : "Player O's turn",
      "draw": "Draw",
      "XW": "Player X won!",
      "OW": "Player O won!",
      "contact_1": "Contact Me",
      "contact_2": "Other Links",
      "about_title_1": "Tic tac Toe",
      "about_msg_1": "In decision theory, minimax (or minmax) is a method to minimize the maximum possible loss. It can be thought of as maximizing the minimum gain (maximin). You start with two 0-0 theory players of games, covering both cases in which players take alternate paths (by rounds) or simultaneously. The concept can be extended to more complex games and to decision making in the presence of uncertainties. In this case, there is no other player, the consequences of decisions depend on unknown factors.",
      "about_title_2": "Tic tac toe",
      "about_msg_2": "A simple version of the minimax algorithm handles games like tic-tac-toe, in which each player can win, lose, or draw. If player A can win with one move, that's his best move. Player B identifies that one move will lead to a situation where the opponent can win in the next move, and that there is another move that could lead to a situation where the opponent can at most tie, so the latter is the best move After a few rounds, it is easy to identify which is the best move. The minimax algorithm helps to find the best move by walking through the valid options, starting at the end of the game. At each step, it is assumed that the player maximizer is trying to maximize his chances of winning, while in the next round the minimizing player is trying to minimize the chances of this happening (by maximizing the chances that he himself will win). and the lowest scores the minimizer can make that one have.",
      "about_title_3": "Performance and Optimizations",
      "about_msg_3": "The mimimax algorithm in Tic tac toe (or in other types of games) can do a lot of processing, which can make the algorithm slow, so it must be important to make optimizations so that it is performed correctly while running the game. For this, alpha-beta pruning can be used. It can also be important, especially on devices with low processing power such as cell phones, or even on more powerful devices, that the codes are optimized for to avoid unnecessary processing and time expenses because as this algorithm does a lot of processing, especially in the analysis of the first games, such expenses can be greatly increased and cause a great impact on the performance drop.",
      "about_title_4": "Algorithm",
      "about_msg_4": "The minimax algorithm with depth limit (using a heuristic to finish scanning after a given depth) is shown below, in pseudocode.",
      "code": [
        "function  minimax(node, depth, maximizingPlayer) is\n",
        "    if depth = 0 or node is a terminal node then\n",
        "        return the heuristic value of node\n",
        "    if maximizingPlayer then\n",
        "        value := ‚àí‚àû\n",
        "        for each child of node do\n",
        "            value := max(value, minimax(child, depth ‚àí 1, FALSE))\n",
        "        return value\n",
        "    else (* minimizing player *)\n",
        "        value := +‚àû\n",
        "        for each child of node do\n",
        "            value := min(value, minimax(child, depth ‚àí 1, TRUE))\n",
        "        return value\n"
      ]
    },
    "pt": {
      "langdesc": "Portugu√™s üáµüáπ",
      "app_name": "Tic Tac Toe",
      "advice": "Nota:",
      "advice_msg": "X sempre jogar√° primeiro!",
      "restart": "Reiniciar",
      "author": "Autor: Vivaldo Roque",
      "install": "Instalar",
      "contact_text": "Contato",
      "about_text": "Sobre",
      "home_text": "In√≠cio",
      "side_msg": "Escolha entre \"X\" ou \"O\"",
      "X": "Vez do jogador X",
      "O" : "Vez do jogador O",
      "draw": "Empate",
      "XW": "Jogador X venceu!",
      "OW": "Jogador O venceu!",
      "contact_1": "Entre Em Contacto",
      "contact_2": "Outros Links",
      "about_title_1": "Tic tac Toe, jogo da velha ou jogo do galgo",
      "about_msg_1": "Em teoria da decis√£o, o minimax (ou minmax) √© um m√©todo para minimizar a poss√≠vel perda m√°xima. Pode ser considerado como a maximiza√ß√£o do ganho m√≠nimo (maximin). Come√ßa-se com dois jogadores 0-0 da teoria dos jogos, cobrindo ambos os casos em que os jogadores tomam caminhos alternados (por rodadas) ou simultaneamente. Pode-se estender o conceito para jogos mais complexos e para tomada de decis√£o na presen√ßa de incertezas. Nesse caso, n√£o existe outro jogador, as consequ√™ncias das decis√µes dependem de fatores desconhecidos.",
      "about_title_2": "Jogo da velha",
      "about_msg_2": "Uma vers√£o simples do algoritmo minimax lida com jogos como o jogo da velha, no qual cada jogador pode ganhar, perder ou empatar. Se o jogador A pode vencer com um movimento, esse √© o seu melhor movimento. Se o jogador B identifica que um movimento levar√° a uma situa√ß√£o em que o advers√°rio pode ganhar no pr√≥ximo movimento, e que existe outro movimento que poder√° levar a uma situa√ß√£o em que o advers√°rio pode, no m√°ximo, empatar, ent√£o, este √∫ltimo √© o melhor movimento para ele. Ap√≥s algumas rodadas, √© f√°cil identificar qual √© o melhor movimento. O algoritmo minimax ajuda a encontrar a melhor jogada, ao se caminhar pelas op√ß√µes v√°lidas, a partir do fim do jogo. A cada passo, assume-se que o jogador maximizador est√° tentando maximizar as suas chances de ganhar, enquanto na pr√≥xima rodada o jogador minimizador est√° tentando minimizar as chances de isso acontecer (maximizando as chances de que ele pr√≥prio ganhe). O maximizador precisa escolher uma jogada que tem a maior dentre as menores pontua√ß√µes que o minimizador pode fazer aquele ter.",
      "about_title_3": "Desempenho e otimiza√ß√µes",
      "about_msg_3": "O algor√≠timo mimimax no Jogo da Velha(ou em outros tipos de jogos) pode fazer muito processamento, o que pode fazer o algor√≠timo ser lento, por isso, deve ser importante fazer-se otimiza√ß√µes para que ele seja efetuado de forma r√°pida durante a execu√ß√£o do jogo. Para isso pode ser usado por exemplo a Poda alfa-beta. Tamb√©m pode ser importante, principalmente em dispositivos com baixo poder de processamento como celulares, ou at√© em dispositivos mais potentes, que os c√≥digos sejam otimizados para evitar-se gastos com processamento e tempo desnecess√°rios pois como esse algoritmo faz muito processamento, principalmente nas an√°lises das primeiras partidas, tais gastos podem ser muito aumentados e causarem um grande impacto na queda de desempenho.",
      "about_title_4": "Algoritmo",
      "about_msg_4": "O algoritmo minimax com limite de profundidade (usando uma heur√≠stica para terminar o vasculhamento ap√≥s uma dada profundidade) √© mostrado abaixo, em pseudoc√≥digo.",
      "code": [
        "SE n√≥ √© um n√≥ terminal OU profundidade = 0 ENT√ÉO\n",
        "                   RETORNE o valor da heur√≠stica do n√≥\n",
        "               SEN√ÉO SE maximizador √© FALSE ENT√ÉO\n",
        "                   Œ± ‚Üê +‚àû\n",
        "                   PARA CADA filho DE n√≥\n",
        "                       Œ± ‚Üê min(Œ±, minimax(filho, profundidade-1,true))\n",
        "                   FIM PARA\n",
        "                   RETORNE Œ±\n",
        "               SEN√ÉO\n",
        "                   //Maximizador\n",
        "                   Œ± ‚Üê -‚àû\n",
        "                   //Escolher a maior dentre as perdas causadas pelo minimizador\n",
        "                   PARA CADA filho DE n√≥\n",
        "                       Œ± ‚Üê max(Œ±, minimax(filho, profundidade-1,false))\n",
        "                   FIM PARA\n",
        "                   RETORNE Œ±\n",
        "               FIM SE\n",
        "           FIM ROTINA\n"
      ]
    }
  }